# Copyright 2024 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Publish wheels and Docker images

# Run workflow only for ...
on:
  pull_request: # pull requests
    types: [opened, synchronize, reopened]
  push:
    branches:
      - develop # pushes on the 'develop' branch
    tags:
      - '**' # new git tags (including hierarchical tags like v1.0/beta)
  workflow_dispatch: # manual trigger
    inputs:
      docker_tag:
        description: Tag the docker images as e.g. 'latest' or 'feat-rspy123'
        required: false

env:
  PYTHON_VERSION: 3.11
  DOCKER_REGISTRY: ghcr.io

jobs:

  # Calculate variables for this workflow
  set-env:
    if: github.actor != 'dependabot[bot]' # ignore pull requests by github bot
    runs-on: ubuntu-latest
    name: "Set environment"
    outputs:
      docker_tag: ${{ steps.set-env.outputs.docker_tag }}
      branch_name: ${{ steps.set-env.outputs.branch_name }}
    steps:
      - id: set-env
        name: "Set environment"
        run: |
          set -x

          # Get the current branch name (or source branch for a pull request)
          if [[ ${{ github.event_name }} == pull_request ]]; then
            branch_name=${{ github.event.pull_request.head.ref }}
          else
            branch_name=${{ github.ref_name }}
          fi

          # Determine the docker tag to set to new docker images.
          # For a pull request, use the branch name
          if [[ ${{ github.event_name }} == pull_request ]]; then
            docker_tag="$branch_name"

          # For a push on develop or a tag, use the docker tag :latest
          elif [[ ${{ github.event_name }} == push ]]; then
            docker_tag=latest

          # For a manual trigger, use the user-defined tag
          elif [[ ${{ github.event_name }} == workflow_dispatch ]]; then
            docker_tag=${{ github.event.inputs.docker_tag }}

          else
            >&2 echo "Unknown trigger"
            exit 1
          fi

          # Replace special characters by -
          docker_tag=$(sed "s/[^a-zA-Z0-9]/-/g" <<< "$docker_tag")

          # Save values
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "docker_tag=$docker_tag" >> $GITHUB_OUTPUT
        shell: bash

  ##################
  # Publish wheels #
  ##################

  publish-whl:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    name: "Publish wheel"
    outputs:
      version_name: ${{ steps.publish-wheel.outputs.version_name }}
      package_name: ${{ steps.publish-wheel.outputs.package_name }}
    continue-on-error: true # TODO remove when the right python repo will be set
    steps:
      - uses: actions/checkout@v4
      - id: publish-wheel
        uses: ./.github/actions/publish-wheel
        with:
          package_directory: .


  #########################
  # Publish Docker images #
  #########################

  publish-docker-store:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    name: "Docker image for wheel storage"
    needs: [set-env, publish-whl]
    permissions: write-all
    outputs:
      docker_image: ${{ steps.publish-docker.outputs.docker_image}}
    steps:
      - uses: actions/checkout@v4

      # Download .whl files into ./whl/
      - name: Download .whl dependencies
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.publish-whl.outputs.package_name }}
          path: ./whl

      - id: publish-docker
        uses: ./.github/actions/publish-docker
        with:
          dockerfile: ./.github/dockerfiles/Dockerfile.store
          build_context_path: ./whl
          image_suffix: _store
          version_name: ${{ needs.publish-whl.outputs.version_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          docker_tag: ${{ needs.set-env.outputs.docker_tag }}

  publish-docker-jupyter:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    name: "Docker image for Jupyter"
    needs: [set-env, publish-whl]
    permissions: write-all
    outputs:
      docker_image: ${{ steps.publish-docker.outputs.docker_image}}
    steps:
      - uses: actions/checkout@v4

      # Download .whl files into ./whl/
      - name: Download .whl dependencies
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.publish-whl.outputs.package_name }}
          path: ./whl

      - id: publish-docker
        uses: ./.github/actions/publish-docker
        with:
          dockerfile: ./.github/dockerfiles/Dockerfile.jupyter
          build_context_path: ./whl
          image_suffix: _jupyter
          version_name: ${{ needs.publish-whl.outputs.version_name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          docker_tag: ${{ needs.set-env.outputs.docker_tag }}

  ###########
  # TESTING #
  ###########

  # Test rs-demo with the new Docker images
  test-demo:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    name: "Test rs-demo"
    needs: [set-env, publish-docker-jupyter]
    steps:
      - name: Log into Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: test-demos
        name: "Test rs-demo"
        run: |
          set -x

          # Clone the rs-demo repository.
          # Use the ssh public key from: https://github.com/RS-PYTHON/rs-demo/settings/keys
          # and the private key from: https://github.com/RS-PYTHON/rs-client-libraries/settings/secrets/actions
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${{ secrets.RS_DEMO_PRIVATE_SSH_KEY }}"
          git clone git@github.com:RS-PYTHON/rs-demo.git

          # Try to checkout in rs-demo the same branch name than in rs-server.
          # If the branch doesn't exist, it's ok, we stay on the default branch.
          cd rs-demo
          git checkout ${{ needs.set-env.outputs.branch_name }} || true
          git status

          # Run the rs-demo local mode using the newly created docker images
          cd local-mode
          docker_tag="${{ needs.set-env.outputs.docker_tag }}"
          docker_tag="${docker_tag:-latest}" # latest by default
          ./test-docker-tag.sh "$docker_tag"
          docker compose -f docker-compose-test-tag.yml up -d
          ./run-notebooks.sh "$docker_tag"

        shell: bash
